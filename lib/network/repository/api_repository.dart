import 'dart:convert';
import 'dart:io';
import 'package:evidya/model/GroupListModal.dart';
import 'package:evidya/model/StudentLearningDetailsModal.dart';
import 'package:evidya/model/all_intructor_modal.dart';
import 'package:evidya/model/chat_model.dart';
import 'package:evidya/model/chatimageuplord.dart';
import 'package:evidya/model/course_detail_modal.dart';
import 'package:evidya/model/course_modal.dart';
import 'package:evidya/model/courses_modal.dart';
import 'package:evidya/model/follow_intructor_modal.dart';
import 'package:evidya/model/followed_instructor_modal.dart';
import 'package:evidya/model/fpasswordmodal.dart';
import 'package:evidya/model/groupcontact.dart';
import 'package:evidya/model/history_modal.dart';
import 'package:evidya/model/instructor_course_modal.dart';
import 'package:evidya/model/instructor_details_modal.dart';
import 'package:evidya/model/instructor_profile_modal.dart';
import 'package:evidya/model/lesson_modal.dart';
import 'package:evidya/model/liked_course_modal.dart';
import 'package:evidya/model/live_class_modal.dart';
import 'package:evidya/model/lms_home_modal.dart';
import 'package:evidya/model/lms_search_modal.dart';
import 'package:evidya/model/login/contactsmatch_Modal.dart';
import 'package:evidya/model/meet_list__modal.dart';
import 'package:evidya/model/meettoken.dart';
import 'package:evidya/model/recentchatconnectionslist_modal.dart';
import 'package:evidya/model/rtm_token_model.dart';
import 'package:evidya/model/rtm_userName_fetch_modal.dart';
import 'package:evidya/model/rtmtoken_modal.dart';
import 'package:evidya/model/schudlemeetmodal.dart';
import 'package:evidya/model/sub_category_modal.dart';
import 'package:evidya/model/user_profile_modal.dart';
import 'package:evidya/model/videocall_modal.dart';
import 'package:evidya/screens/bloc/models/post.dart';
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:dio/dio.dart';
import 'package:evidya/model/catogary.dart';
import 'package:evidya/model/home.dart';
import 'package:evidya/constants/string_constant.dart';
import 'package:evidya/model/livetoken_model.dart';
import 'package:evidya/model/login/autogenerated.dart';
import 'package:evidya/model/login_res.dart';
import 'package:evidya/model/schudleclassmodal.dart';
import 'package:evidya/network/api_client/api_rest_client.dart';
import 'package:evidya/utils/helper.dart';
import 'package:image_picker/image_picker.dart';
import '../../model/blockuserlist.dart';
import '../../model/delete_user_model.dart';
import '../../model/file_backup_response.dart';
import '../../model/get_request_class_list_modal.dart';

class ApiRepository {
  ApiRestClient apiRestClient;
  Dio _dio;
  ApiRepository() {
    BaseOptions options = BaseOptions(
      baseUrl: StringConstant.BASE_URL,
      receiveDataWhenStatusError: true,
    );
    _dio = Dio(options);
    _dio.options.headers['Accept'] = 'application/json';
    _dio.options.connectTimeout = 150000;
    apiRestClient = ApiRestClient(_dio);
  }

  Future<Autogenerated> userLogin(
      String email, String password, String fcmToken) async {
    dynamic data = {
      'email': email,
      'password': password,
      'fcm_token': fcmToken
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'auth', data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> otpLogin(
      String mobile, String otp, String fcmToken) async {
    dynamic data = {'mobile': mobile, 'otp': otp, 'fcm_token': fcmToken};
    var response =
        await _dio.post(StringConstant.BASE_URL + 'otp-auth', data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> Otpvalidaction(
    String phoneno,
  ) async {
    dynamic data = {
      'phone': phoneno,
    };
    var response = await _dio
        .post(StringConstant.BASE_URL + 'sms/registration-otp', data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> loginOtp(
    String phoneno,
  ) async {
    dynamic data = {
      'mobile': phoneno,
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'sms/login-otp', data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> userRegistration(String name, String phoneNo,
      String email, String password, String confirmpassword, otp) async {
    dynamic data = {
      'name': name,
      'email': email,
      'phone': phoneNo,
      'password': password,
      'password_confirmation': confirmpassword,
      'otp': otp
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'user/create', data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LoginModel> ChangePassword(String oldpassword, String newpassword,
      String confirmedpassword, String token, String email) async {
    _dio.options.headers['Authorization'] = 'bearer  ${token}';
    dynamic data = {
      'NewPassword': newpassword,
      'ConfirmNewPassword': confirmedpassword,
      'EmailAddress': email,
      'OldPassword': oldpassword
    };
    var response = await _dio
        .put(StringConstant.BASE_URL + '/User/ChangePassword', data: data);
    if (response.statusCode == 200) {
      return LoginModel.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LoginModel> UpdateProfile_Api(String firstname, String phone,
      String email, String token, String password) async {
    debugPrint('email id that we have to update ' + email);
    _dio.options.headers['Authorization'] = 'bearer  ${token}';
    dynamic data = {
      'password': password,
      'name': firstname,
      'phone': phone,
      'email': email,
      'password_confirmation': password,
    };
    var response =
        await _dio.put(StringConstant.BASE_URL + '/User/update', data: data);
    if (response.statusCode == 200) {
      return LoginModel.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Schudleclassmodal> schudleclass_Api(String token, String name,
      String description, String date, String time, image) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    String fileName = image.path.split('/').last;
    FormData formData = FormData.fromMap({
      'name': name,
      'description': description,
      'date': date,
      'time': time,
      'image': await MultipartFile.fromFile(image.path, filename: fileName),
    });
    var response = await _dio
        .post(StringConstant.BASE_URL + 'live-class/create', data: formData);
    debugPrint('Rersponse $response');
    if (response.statusCode == 200) {
      return Schudleclassmodal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LMSHomeModal> getHomeList(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'home');
    if (response.statusCode == 200) {
      return LMSHomeModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Homemodal> upcommingclasses(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'live-classes');
    if (response.statusCode == 200) {
      return Homemodal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Homemodal> Recordedvideos(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'recorded-classes');
    if (response.statusCode == 200) {
      return Homemodal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> leavevideocall(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'meeting/leave/' + id);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Meettoken> vidoecallstatus(String token, String meeting_id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    debugPrint('Metting id $meeting_id');
    var response = await _dio
        .get(StringConstant.BASE_URL + 'meeting/status/' + meeting_id);
    if (response.statusCode == 200) {
      return Meettoken.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LivetokenModel> livedata(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'live-class/' + id);
    debugPrint('response $response');
    if (response.statusCode == 200) {
      return LivetokenModel.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Groupcontact> groupcontact(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.post(StringConstant.BASE_URL + 'connection/all');
    if (response.statusCode == 200) {
      return Groupcontact.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RtmTokenModel> rtmtoken(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'live-chatroom/token/' + id);
    if (response.statusCode == 200) {
      return RtmTokenModel.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Post> category(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'categories');
    if (response.statusCode == 200) {
      return Post.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<SubCategoryModal> subCategory(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'subcategories/${id}');
    if (response.statusCode == 200) {
      return SubCategoryModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<CoursesModal> courses(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'courses/${id}');
    if (response.statusCode == 200) {
      return CoursesModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<CourseDetailModal> courseDetails(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'course-detail/${id}');
    if (response.statusCode == 200) {
      return CourseDetailModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LessonModal> lesson(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'lessons/${id}');
    if (response.statusCode == 200) {
      return LessonModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<StudentLearningDetailsModal> studentLearningDetails(
      String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'admin/course/mysubscription');
    if (response.statusCode == 200) {
      return StudentLearningDetailsModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> subscribeLesson(String token, String id) async {
    debugPrint('DataToken $token');
    _dio.options.headers['X-Auth-Token'] = '${token}';
    debugPrint('Data $id');
    var response = await _dio.get(StringConstant.BASE_URL + 'subscribe/${id}');
    debugPrint('Response ${response}');
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LikedCoursesModal> likeCourse(String token, String id) async {
    debugPrint('DataToken $token');
    _dio.options.headers['X-Auth-Token'] = '${token}';
    debugPrint('Data $id');
    var response = await _dio.get(StringConstant.BASE_URL + 'likecourse/${id}');
    debugPrint('Response ${response}');
    if (response.statusCode == 200) {
      return LikedCoursesModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<FollowInstructorModal> followInstructor(
      String token, String id) async {
    debugPrint('DataToken $token');
    _dio.options.headers['X-Auth-Token'] = '${token}';
    debugPrint('Data $id');
    var response = await _dio.get(StringConstant.BASE_URL + 'follow/${id}');
    debugPrint('Response ${response}');
    if (response.statusCode == 200) {
      return FollowInstructorModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<FollowedInstructorModal> followList(String token) async {
    debugPrint('DataToken $token');
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'followed');
    debugPrint('Response ${response}');
    if (response.statusCode == 200) {
      return FollowedInstructorModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<AllInstructorModal> getAllMentorList(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'instructors');
    if (response.statusCode == 200) {
      return AllInstructorModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<MeetList_Modal> meetList(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'meeting/meetings');
    if (response.statusCode == 200) {
      return MeetList_Modal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Schudlemeet> createmeeting(
      String title,
      String subject,
      String date,
      String starttime,
      String endtime,
      var repeatable,
      var audio,
      var video,
      String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {
      'name': title,
      'description': 'Mobile Application',
      'date': date,
      'start_time': starttime,
      'end_time': endtime,
      'repeatable': repeatable,
      'disable_video': video,
      'disable_audio': audio,
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'meeting/create', data: data);
    if (response.statusCode == 200) {
      debugPrint('Response Data ${response.data}');
      return Schudlemeet.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> watch_time(String token, user_id, video_id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {'user_id': user_id, 'video_id': video_id};
    var response = await _dio
        .post(StringConstant.BASE_URL + 'watch-time/record', data: data);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<ContactsmatchModal> searchusers(String search, String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {
      'term': search,
    };
    var response = await _dio
        .post(StringConstant.BASE_URL + 'connection/search', data: data);
    if (response.statusCode == 200) {
      return ContactsmatchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LMSSearchModal> lmsSearch(String search, String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {
      'term': search,
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'search', data: data);
    if (response.statusCode == 200) {
      return LMSSearchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LiveClassModal> liveClassesData(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(
      StringConstant.BASE_URL + 'live-classes',
    );
    if (response.statusCode == 200) {
      return LiveClassModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> deleteMeeting(String token, String meetingId) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    debugPrint('Token $token MeetingId $meetingId');
    var response = await _dio.get(
      StringConstant.BASE_URL + 'meeting/delete/${meetingId}',
    );
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> deleteBroadcast(String token, String broadcastId) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio
        .get(StringConstant.BASE_URL + 'live-class/delete/${broadcastId}');
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> progressLesson(String token, String lessonId) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'progresslesson/${lessonId}');
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RtmtokenModal> addfriend(var id, String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {
      'connection_id': id,
    };
    var response =
        await _dio.post(StringConstant.BASE_URL + 'connection/add', data: data);
    if (response.statusCode == 200) {
      return RtmtokenModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RecentchatconnectionslistModal> recentconnection(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';

    var response = await _dio.get(StringConstant.BASE_URL + 'connections');
    if (response.statusCode == 200) {
      return RecentchatconnectionslistModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Blockuserlist> blockuserist(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio
        .get(StringConstant.BASE_URL + 'connection/blocked-connections');
    if (response.statusCode == 200) {
      return Blockuserlist.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RtmtokenModal> Messanger_rtmtoken(String token) async {
    _dio.options.headers['X-Auth-Token'] = token;
    var response = await _dio.post(StringConstant.BASE_URL + 'messenger/build');
    if (response.statusCode == 200) {
      return RtmtokenModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Meettoken> hosttoken(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'meeting/start/' + id);
    if (response.statusCode == 200) {
      return Meettoken.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> deletegroupmember(
      {String token,
      int groupid,
      String membername,
      String groupMemberid,
      String endpoint}) async {
    FormData formData = FormData.fromMap({
      'group_id': groupid,
      'user_name': membername,
      'peer_id': groupMemberid,
    });
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.post(
        StringConstant.BASE_URL + 'connection/' + endpoint,
        data: formData);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> blockuser({String token, userid}) async {
    FormData formData = FormData.fromMap({
      'user_id': userid,
    });
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.post(
        StringConstant.BASE_URL + 'connection/block-toggle',
        data: formData);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<Meettoken> usertoken(String token, String meetid) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'meeting/join/' + meetid);
    if (response.statusCode == 200) {
      return Meettoken.fromJson(response.data);
    } else {
      EasyLoading.showError(response.statusMessage);
      return null;
    }
  }

  Future<InstructorDetailsModal> getInstructorDetails(
      String token, String id) async {
    debugPrint('grtcxvfffn  $id');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'instructor-detail/${id}');

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return InstructorDetailsModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<MeetingScheduleModal> history(String token) async {
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.get(StringConstant.BASE_URL + 'meeting-history');
    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return MeetingScheduleModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<MeetingScheduleModal> historyBoardCast(String token) async {
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'broadcast-history');
    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return MeetingScheduleModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Catogery> getcategory(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get('https://myjson.dit.upm.es/api/bins/ibql');
    if (response.statusCode == 200) {
      return Catogery.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<CourseModal> getcourses(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'courses/' + id);
    if (response.statusCode == 200) {
      return CourseModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<CourseModal> getlession(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'lessons/' + id);
    if (response.statusCode == 200) {
      return CourseModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RTMUserNameFetchModal> rtmFetchUserName(
      String token, String iD, String name) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {'id': iD, 'name': name};
    var response = await _dio
        .post(StringConstant.BASE_URL + 'meeting-rtm-token', data: data);
    if (response.statusCode == 200) {
      return RTMUserNameFetchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<VideocallModal> videocallapi(var name, var id, String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    dynamic data = {
      'callee_id': id,
      'callee_name': name,
    };
    var response = await _dio
        .post(StringConstant.BASE_URL + 'messenger/start-call', data: data);
    if (response.statusCode == 200) {
      return VideocallModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<VideocallModal> receivevideocallapi(var callid, String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(
        StringConstant.BASE_URL + 'messenger/receive-call?call_id=' + callid);
    if (response.statusCode == 200) {
      return VideocallModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> sendFCMCallTrigger({
    String action,
    String type,
    String otherUserFcmToken,
    String title,
    String callId,
    String userProfileUrl,
    String myFcmToken,
    String body,
    String fromId,
  }) async {
    _dio.options.headers['Authorization'] =
        'key=  ${'AAAAG8bzeow:APA91bEQai_ldUEZoR-i2WWNqPhjycgkH93YSE90pjKBF2LjjT6HrgtRfbTxvMh0wPsTWMquzBRHp29BX8iPykTbeMYThG4r7SVzQwGsRuVd0rOhyJsrB593XsKopDdVEjIdqyEuESxT'}';
    var priority = 'high';

    dynamic data = {
      'registration_ids': [otherUserFcmToken /*, 'token_2'*/],
      'type': type,
      'notification': {},
      'data': {
        'type': type,
        'title': title,
        'body': body,
        'userprofile': userProfileUrl,
        'action': action,
        'call_id': callId,
        'fcm_token': myFcmToken,
        'channelKey': type,
        'from_id': fromId,
      },
      'ttl': '30s',
      'android': {'priority': priority},
      'priority': 10
    };
    var response =
        await _dio.post('https://fcm.googleapis.com/fcm/send', data: data);
    if (response.statusCode == 200) {
      debugPrint('fcm call ${response.data}');
      // EasyLoading.showToast('FCMResponse=${response.data['success']}',toastPosition: EasyLoadingToastPosition.bottom);
      return Autogenerated.fromJson(response.data);
    } else {
      // EasyLoading.showToast('FCMResponse=${response.statusMessage}',toastPosition: EasyLoadingToastPosition.bottom);
      return null;
    }
  }

  Future<Autogenerated> sendFCMPush(
      {String message,
      String name,
      String token,
      String image,
      String callId,
      String type,
      String fcmtoken,
      String userprofile,
      String datetime,
      String userpeerid,
      String senderpeerid,
      String textid}) async {
    _dio.options.headers['Authorization'] =
        'key=  ${'AAAAG8bzeow:APA91bEQai_ldUEZoR-i2WWNqPhjycgkH93YSE90pjKBF2LjjT6HrgtRfbTxvMh0wPsTWMquzBRHp29BX8iPykTbeMYThG4r7SVzQwGsRuVd0rOhyJsrB593XsKopDdVEjIdqyEuESxT'}';
    var priority = 'normal';
    if (type == 'call_channel' || type == 'cut') {
      priority = 'high';
    }
    dynamic data = {
      'registration_ids': [token /*, 'token_2'*/],
      'type': type,
      'notification': {},
      'data': {
        'type': type,
        'title': name,
        'body': message,
        'image': image,
        'call_id': callId,
        'channelKey': type,
        'fcm_token': fcmtoken,
        'userprofile': userprofile,
        'datetime': datetime,
        'senderpeerid': senderpeerid,
        'receiverpeerid': userpeerid,
        'textid': textid
      },
      // 'ttl': '30s',
      'android': {'priority': priority},
      'priority': 10
    };
    var response =
        await _dio.post('https://fcm.googleapis.com/fcm/send', data: data);
    if (response.statusCode == 200) {
      // debugPrint('fcm call ${response.data}');
      // EasyLoading.showToast('FCMResponse=${response.data['success']}',toastPosition: EasyLoadingToastPosition.bottom);
      return Autogenerated.fromJson(response.data);
    } else {
      // EasyLoading.showToast('FCMResponse=${response.statusMessage}',toastPosition: EasyLoadingToastPosition.bottom);
      return null;
    }
  }

  Future<Autogenerated> sendChatPush(
      {ChatModel model,
      String title,
      String receiverToken,
      String fromPeerId,
      String type}) async {
    _dio.options.headers['Authorization'] =
        'key=  ${'AAAAG8bzeow:APA91bEQai_ldUEZoR-i2WWNqPhjycgkH93YSE90pjKBF2LjjT6HrgtRfbTxvMh0wPsTWMquzBRHp29BX8iPykTbeMYThG4r7SVzQwGsRuVd0rOhyJsrB593XsKopDdVEjIdqyEuESxT'}';

    dynamic data = {
      'registration_ids': [receiverToken /*, 'token_2'*/],
      'type': type,
      'notification': {},
      'data': {
        'type': type,
        'title': title,
        'body': jsonEncode(model.toJson()),
        'from_id': fromPeerId,
        'channelKey': type,
      },
      // 'ttl': '30s',
      'android': {'priority': 'normal'},
      'priority': 10
    };
    var response =
        await _dio.post('https://fcm.googleapis.com/fcm/send', data: data);
    if (response.statusCode == 200) {
      // debugPrint('fcm call ${response.data}');
      // EasyLoading.showToast('FCMResponse=${response.data['success']}',toastPosition: EasyLoadingToastPosition.bottom);
      return Autogenerated.fromJson(response.data);
    } else {
      // EasyLoading.showToast('FCMResponse=${response.statusMessage}',toastPosition: EasyLoadingToastPosition.bottom);
      return null;
    }
  }

/*  Future<Autogenerated> fcmresponse(String message, var name, var token, image, callId, var type, fcmtoken) async {
    var priority= 'normal';
    if(type=='call_channel'){
       priority= 'high';
    }
    _dio.options.headers['Authorization'] =
    'key=  ${'AAAAG8bzeow:APA91bEQai_ldUEZoR-i2WWNqPhjycgkH93YSE90pjKBF2LjjT6HrgtRfbTxvMh0wPsTWMquzBRHp29BX8iPykTbeMYThG4r7SVzQwGsRuVd0rOhyJsrB593XsKopDdVEjIdqyEuESxT'}';
    debugPrint('Messgae $token');

    dynamic data = {
      'registration_ids': [token, 'token_2'],
      'notification': {
        'title': name,
        'body': {
          'type': type,
          'title': name,
          'body': message,
          'image': image,
          'call_id': callId,
          'channelKey': type,
          'fcm_token': fcmtoken,
        }
      },
    'ttl':'60s',
      'type': type,
      'data': {
        'type': type,
        'title': name,
        'body': message,
        'image': image,
        'call_id': callId,
        'channelKey': type,
        'fcm_token': fcmtoken,
      },
      'apns': {
        'payload': {
          'aps': {
            'alert': 'sample',
            'sound': 'default',
            'contentAvailable': true
          },
        },
      },
      'android': {'priority': priority},
    };
    debugPrint('Data $data');
    var response =
    await _dio.post('https://fcm.googleapis.com/fcm/send', data: data);
    if (response.statusCode == 200) {
      EasyLoading.showToast('FCMResponse=${response.data['success']}',
          toastPosition: EasyLoadingToastPosition.bottom);
      return Autogenerated.fromJson(response.data);
    } else {
      EasyLoading.showToast('FCMResponse=${response.statusMessage}',
          toastPosition: EasyLoadingToastPosition.bottom);
      return null;
    }
  }*/

  Future<dynamic> delete(String token) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    var response = await _dio.get(StringConstant.BASE_URL + 'account-dismiss');
    if (response.statusCode == 200) {
      return (response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Chatimageuplord> uplordchatimage(String token, XFile file) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    String fileName = file.path.split('/').last;
    var formData = FormData.fromMap({
      'file': await MultipartFile.fromFile(file.path, filename: fileName),
    });
    var response = await _dio
        .post(StringConstant.BASE_URL + 'messenger/attachment', data: formData);
    if (response.statusCode == 200) {
      return Chatimageuplord.fromJson(response.data);
    } else {
      // Helper.showMessage(response.statusMessage);
      EasyLoading.showToast('Unable to send',
          toastPosition: EasyLoadingToastPosition.top,
          duration: const Duration(seconds: 5));
      return null;
    }
  }

  Future<UserProfileModal> getUserProfile(String token) async {
    // debugPrint('Sir Sorry $token');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.get(StringConstant.BASE_URL + 'profile');

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return UserProfileModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<InstructorProfileModal> getInstructorProfile(
      String token, String id) async {
    // debugPrint('Sir Sorry $token');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.get(StringConstant.BASE_URL + 'instructor/${id}');

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return InstructorProfileModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<InstructorCourseModal> getInstructorCourses(
      String token, String id) async {
    // debugPrint('Sir Sorry $token');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'courses-by-instructor/${id}');

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return InstructorCourseModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<GetRequestClassList> getRequestClassList(String token) async {
    // debugPrint('Sir Sorry $token');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.get(StringConstant.BASE_URL + 'requestclasses');

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return GetRequestClassList.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> updateProfilePic(String token, File file) async {
    _dio.options.headers['X-Auth-Token'] = '${token}';
    String fileName = file.path.split('/').last;
    var formData = FormData.fromMap({
      'image': await MultipartFile.fromFile(file.path, filename: fileName),
    });
    var response = await _dio.post(StringConstant.BASE_URL + 'profile/upload',
        data: formData);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> createGroup({
    String token,
    String groupName,
    String groupDescription,
    File image,
    String groupMember,
  }) async {
    String fileName = image.path.split('/').last;
    FormData formData = FormData.fromMap({
      'name': groupName,
      'description': groupDescription,
      'image': await MultipartFile.fromFile(image.path, filename: fileName),
      'members': groupMember,
    });
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.post(
        StringConstant.BASE_URL + 'connection/create-group',
        data: formData);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> addGroupMembers({
    String token,
    String groupId,
    String members,
  }) async {
    // debugPrint('Sir Sorry $token');
    dynamic data = {'group_id': groupId, 'members': members};
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.post(
        StringConstant.BASE_URL + 'connection/add-group-members',
        data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<GroupListModal> groupList(String token) async {
    // debugPrint('Sir Sorry $token');
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'connection/groups');
    if (response.statusCode == 200) {
      // debugPrint('Response ${response.data}');
      return GroupListModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> updateUserProfile(
      {String token,
      String name,
      String email,
      String age,
      String phone,
      String bio,
      String city,
      String address,
      String state,
      String country}) async {
    // debugPrint('Sir Sorry $token');
    dynamic data = {
      'name': name,
      'phone': phone,
      'email': email,
      'gender': '',
      'age': age,
      'language': '',
      'bio': bio,
      'occupation': '',
      'city': city,
      'state': state,
      'address': address,
      'country': country,
    };
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.post(StringConstant.BASE_URL + 'profile/update', data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> requestPrivateClasses(
      {String token,
      String instructorId,
      String topic,
      String description,
      String date,
      String time,
      String classType}) async {
    dynamic data = {
      'instructor_id': instructorId,
      'topic': topic,
      'description': description,
      'date': date,
      'time': time,
      'classtype': classType,
    };
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.post(StringConstant.BASE_URL + 'requestclass', data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> courseFeedback(
      {String token, String courseId, String rating, String comment}) async {
    dynamic data = {
      'course_id': courseId,
      'rating': rating,
      'comment': comment
    };
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio.post(StringConstant.BASE_URL + 'feedback-course',
        data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> sendReport({
    String token,
    String module,
    String message,
  }) async {
    dynamic data = {
      'module': module,
      'message': message,
    };
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.post(StringConstant.BASE_URL + 'report', data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> requestClassStatus(
      {String token, String id, String reason}) async {
    dynamic data = {'id': id, 'status': 'Reject', 'reason': reason};
    _dio.options.headers['X-Auth-Token'] = '$token';
    var response = await _dio
        .post(StringConstant.BASE_URL + 'requestedclass-status', data: data);

    if (response.statusCode == 200) {
      debugPrint('Response ${response.data}');
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<Fpasswordmodal> forgetPasswordApiCall(String email) async {
    dynamic data = {'email': email};
    var response = await _dio.post(StringConstant.BASE_URL + 'forget-password',
        data: data);
    if (response.statusCode == 200) {
      return Fpasswordmodal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  //TODO upload db
  Future<DeleteUserModel> uploadDbFile(String token, File file) async {
    _dio.options.headers['X-Auth-Token'] = token;
    String fileName = file.path.split('/').last;
    var formData = FormData.fromMap({
      'file': await MultipartFile.fromFile(file.path, filename: fileName),
    });
    var response = await _dio.post(
        StringConstant.BASE_URL + 'messenger-backup/initiate',
        data: formData);
    print(response);
    if (response.statusCode == 200) {
      return DeleteUserModel.fromJson(response.data);
    } else {
      //https://app.bvidya.com/api/messenger-backup/initiate
      // Helper.showMessage(response.statusMessage);
      // EasyLoading.showToast('Unable to send',
      //     toastPosition: EasyLoadingToastPosition.top,
      //     duration: const Duration(seconds: 5));
      return null;
    }
  }

  //TODO upload db
  Future<FileBackupModel> loadDB(String token) async {
    _dio.options.headers['X-Auth-Token'] = token;
    print(token);
    // _dio.options.headers['X-Auth-Token'] = '$token';
    var response =
        await _dio.get(StringConstant.BASE_URL + 'messenger-backup/retrieve');
    // print(response);
    if (response.statusCode == 200) {
      return FileBackupModel.fromJson(response.data);
    } else {
      return null;
    }
  }

  Future<DeleteUserModel> deleteConnection(String token, String id) async {
    _dio.options.headers['X-Auth-Token'] = token;
    dynamic data = {
      'user_id': id,
    };
    _dio.options.headers['X-Auth-Token'] = token;
    var response = await _dio
        .post(StringConstant.BASE_URL + 'connection/delete', data: data);
    if (response.statusCode == 200) {
      return DeleteUserModel.fromJson(response.data);
    } else {
      return null;
    }
  }

  Future downloadFile(String backupUrl, String path) async {
    try {
      Response response = await _dio.get(
        backupUrl,
        // onReceiveProgress: showDownloadProgress,
        //Received data with List<int>
        options: Options(
            responseType: ResponseType.bytes,
            followRedirects: false,
            validateStatus: (status) {
              return status < 500;
            }),
      );
      print(response.headers);
      File file = File(path);
      var raf = file.openSync(mode: FileMode.write);
      // response.data is List<int> type
      raf.writeFromSync(response.data);
      await raf.close();
    } catch (e) {
      print(e);
    }
  }
}
