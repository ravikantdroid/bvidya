import 'dart:convert';
// import 'dart:typed_data';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:wakelock/wakelock.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:agora_rtc_engine/rtc_engine.dart';
import 'package:agora_rtc_engine/rtc_local_view.dart' as rtc_local_view;
import 'package:agora_rtc_engine/rtc_remote_view.dart' as _rtc_remote_view;
import 'package:permission_handler/permission_handler.dart';
import 'package:pip_view/pip_view.dart';
import 'package:sizer/sizer.dart';
import '../../../localdb/databasehelper.dart';
import '../../../model/login/autogenerated.dart';
import '../../../constants/string_constant.dart';
import '../../../main.dart';
import '../../../network/repository/api_repository.dart';
import '../../../sharedpref/preference_connector.dart';
import '../../../utils/helper.dart';
import '../../bottom_navigation/bottom_navigaction_bar.dart';

class VideoCallScreen extends StatefulWidget {
  final String channelName;
  final String userName;
  final String token;
  final String rtmChannel;
  // final String rtmToken;
  // final String rtmUser;
  // final String appid;
  final String callid;
  final String calleeName;
  final String userCallId;
  final String userAuthToken;
  final String userCallName;
  final String calleeFcmToken;
  final String devicefcmtoken;

  final String userprofileimage;

  const VideoCallScreen(
      {
      // this.appid,
      this.rtmChannel,
      // this.rtmToken,
      // this.rtmUser,
      this.channelName,
      this.token,
      this.userName,
      this.callid,
      this.devicefcmtoken,
      this.userprofileimage,
      this.calleeName,
      this.userCallId,
      this.userCallName,
      this.userAuthToken,
      this.calleeFcmToken,
      Key key})
      : super(key: key);

  @override
  State<VideoCallScreen> createState() => _VideoCallScreenState();
}

class _VideoCallScreenState extends State<VideoCallScreen> {
  String _appId = '';
  LocalDataModal _loginData;
  // String _userpeerid;
  dynamic _profileJson;
  // String _devicefcmtoken;
  final _dbHelper = DatabaseHelper.instance;
  final AudioPlayer _player = AudioPlayer();
  Timer _timer;
  String _appToken = '';
  String _channalname = '';
  // String _username = '';
  // String _calleename = "";
  String _rtmUser = '';
  String _connectionstatus = "Calling";
  bool _joined = false;
  int _remoteUid = 0;
  bool _switch = false;
  RtcEngine _engine;
  bool _muted = true;
  bool _isOnSpeaker = false;
  bool _camera = true;

  bool _hasBuildCalled = false;

  bool _isDataLoading = true;

  @override
  void initState() {
    _hasBuildCalled = false;
    super.initState();

    localData();
    if (widget.userAuthToken != null) {
      _audioply();
    }

    if (widget.callid != null) {
      _getToken(widget.callid);
    } else {
      _callAPI(widget.userCallName, widget.userCallId);
    }
  }

  Future<void> initPlatformState(s) async {
    await [Permission.camera, Permission.microphone].request();

    // Create RTC client instance
    RtcEngineContext context = RtcEngineContext(_appId);
    var engine = await RtcEngine.createWithContext(context);
    //print("Engine $engine");
    _engine = engine;
    // _engine.setEnableSpeakerphone(_speaker);
    engine.setEventHandler(RtcEngineEventHandler(
        joinChannelSuccess: (String channel, int uid, int elapsed) {
      //print('joinChannelSuccess ${channel} ${uid}');
      // Helper.showMessage('joinChannelSuccess ${channel} ${uid}');
      _joined = true;
      _connectionstatus = "Ringing";
      if (_hasBuildCalled) {
        setState(() {
          _isDataLoading = false;
        });
      }
    }, userJoined: (int uid, int elapsed) {
      // debugPrint('userJoined ${uid}');
      // Helper.showMessage('userJoined ${uid}');
      // setState(() {

      // });
      _connectionstatus = "Connected";
      _player.stop();

      if (_hasBuildCalled) {
        setState(() {
          _switch = !_switch;
          _remoteUid = uid;
          _isDataLoading = false;
        });
      }
    }, userOffline: (int uid, UserOfflineReason reason) {
      // debugPrint('userOffline ${uid}');
      _engine.leaveChannel();
      _engine.destroy();
      _onCallEnd(s);
      // Helper.showMessage('userOffline ${uid}');
      // setState(() {
      //   _remoteUid = 0;
      // });
      // debugPrint("Yes Here");
      if (_hasBuildCalled) {
        setState(() {
          _isDataLoading = false;
        });
      }
    }));
    // Enable video
    await engine.enableVideo();
    await engine.setChannelProfile(ChannelProfile.LiveBroadcasting);
    await engine.setClientRole(ClientRole.Broadcaster);
    await engine.muteLocalAudioStream(false);
    // await engine.muteLocalVideoStream(false);
    // Helper.showMessage('joinChannel ${_appToken}${_channalname}');
    engine.joinChannel(_appToken, _channalname, null, 0);
    if (_hasBuildCalled) {
      setState(() {
        _isDataLoading = false;
      });
    }
  }

  Future<void> localData() async {
    final value = await PreferenceConnector.getJsonToSharedPreferencetoken(
        StringConstant.Userdata);
    if (value != null) {
      _profileJson = jsonDecode(value.toString());
      _loginData = LocalDataModal.fromJson(_profileJson);
      if (_hasBuildCalled) {
        setState(() {
          _isDataLoading = false;
        });
      }
    }

    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('video_call', callOnGroing);
    _timer = Timer.periodic(const Duration(seconds: 2), (timer) async {
      int isOnCall = prefs.getInt('video_call');
      // debugPrint("+bac123: $counter");
      if (isOnCall == callEnd && mounted) {
        await prefs.setInt('video_call', callFree);
        Navigator.pop(context);
      }
    });
    Future.delayed(const Duration(seconds: 30)).then((value) async {
      if (_connectionstatus != "Connected" && mounted) {
        await prefs.setInt('video_call', callFree);
        Navigator.pop(context);
      }
    });
  }

  void _callAPI(String name, String id) {
    ApiRepository().videocallapi(name, id, widget.userAuthToken).then((value) {
      EasyLoading.dismiss();
      if (value != null) {
        if (value.status == "successfull") {
          // setState(() {
          _rtmUser = value.body.calleeName;
          _appId = value.body.appid;
          _appToken = value.body.callToken;
          _channalname = value.body.callChannel;
          // _username = _loginData.id.toString();
          // });
          // debugPrint("App Id $APP_ID, Token $Token");
          _fcmapicall(
              action: 'start_call',
              type: 'call_channel',
              callId: value.body.callId,
              msg: 'video');
          // _fcmapicall('video', , '', value.body.callId,
          //     'call_channel');
          try {
            _callinsert(value.body.calleeName, 'video', id);
          } catch (_) {}
          if (_hasBuildCalled) {
            setState(() {
              _isDataLoading = false;
            });
          }
          initPlatformState(context);
        } else {
          EasyLoading.showToast("Sorry, Network Issues! Please Connect Again.",
              toastPosition: EasyLoadingToastPosition.top,
              duration: const Duration(seconds: 5));
          Navigator.pop(context);
        }
      }
    });
  }

  callenamevalue() {
    var textvalue = "";
    if (_rtmUser == "") {
      if (widget.userCallName != null) {
        textvalue = widget.userCallName[0];
      }
    } else {
      textvalue = _rtmUser[0];
    }
    return Text(textvalue,
        style: TextStyle(color: Colors.white, fontSize: 60.sp));
  }

  textsetvalue() {
    var textvalue = "";
    if (_rtmUser == '') {
      if (widget.userCallName != null) {
        textvalue = widget.userCallName[0];
      }
    } else {
      textvalue = _rtmUser;
    }
    return Text(textvalue,
        style: TextStyle(
            fontSize: 17.sp, fontWeight: FontWeight.w500, color: Colors.white));
  }

  @override
  void dispose() {
    debugPrint('TestLive OnDispose Called');
    showOnLock(false);
    _engine?.leaveChannel();
    Wakelock.disable();
    _engine?.destroy();
    _player?.stop();
    _timer?.cancel();
    super.dispose();
    // /*final prefs = await SharedPreferences.getInstance();
    // await prefs.setInt('counter',0);*/
  }

  @override
  Widget build(BuildContext context) {
    _hasBuildCalled = true;
    Wakelock.enable();
    return PIPView(builder: (context, isFloating) {
      return Scaffold(
          resizeToAvoidBottomInset: !isFloating,
          backgroundColor: Colors.black,
          body: Stack(
            children: [
              _isDataLoading
                  ? const Center(
                      child: CircularProgressIndicator(),
                    )
                  : Center(
                      child: _switch
                          ? _renderRemoteVideo()
                          : _renderLocalPreview(),
                    ),
              _switch == false
                  ? Align(
                      alignment: Alignment.topCenter,
                      child: Container(
                        margin: const EdgeInsets.all(30),
                        width: 200,
                        height: 250,
                        color: Colors.transparent,
                        child: GestureDetector(
                          onTap: () {
                            setState(() {
                              _switch = !_switch;
                            });
                          },
                          child: Center(
                              child: Column(
                            children: [
                              const SizedBox(
                                height: 10,
                              ),
                              Align(
                                alignment: Alignment.center,
                                child: CircleAvatar(
                                  backgroundColor: Colors.red,
                                  radius: 50.0,
                                  child: Align(
                                      alignment: Alignment.center,
                                      child: callenamevalue()
                                      // Text(rtmUser==''? "${widget.userCallName[0]}"
                                      //           : "${rtmUser[0]}",
                                      //     style: TextStyle(color: Colors.white, fontSize: 60.sp))
                                      ),
                                ),
                              ),
                              SizedBox(height: 2.h),
                              textsetvalue(),
                              // Text(rtmUser==''? "${widget.userCallName.split(" ")[0]}"
                              //           : "${rtmUser.split(" ")[0]}",style: TextStyle(
                              //     fontSize: 17.sp,
                              //     fontWeight: FontWeight.w500,
                              //     color: Colors.white
                              // ),),
                              SizedBox(height: 1.h),
                              Text(
                                'Calling',
                                textAlign: TextAlign.center,
                                style: TextStyle(
                                    color: Colors.grey, fontSize: 13.sp),
                              ),
                            ],
                          )),
                        ),
                      ),
                    )
                  : Stack(
                      children: [
                        Center(
                          child: _isDataLoading
                              ? const CircularProgressIndicator()
                              : _renderRemoteVideo(),
                        ),
                        Align(
                            alignment: Alignment.topLeft,
                            child: Container(
                                margin: const EdgeInsets.only(
                                  left: 10,
                                  top: 40,
                                ),
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10)),
                                width: 150,
                                height: 200,
                                child: Container(
                                  child: _renderLocalPreview(),
                                )))
                      ],
                    ),
            ],
          ),
          bottomNavigationBar: Container(
            padding: EdgeInsets.symmetric(horizontal: 2.h, vertical: 1.h),
            decoration: BoxDecoration(
                color: Colors.transparent,
                borderRadius: BorderRadius.circular(0)),
            height: 8.h,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: <Widget>[
                GestureDetector(
                    onTap: _onSwitchCamera,
                    child: Image.asset(
                      'assets/icons/svg/camera_flip.png',
                      height: 3.h,
                      width: 3.h,
                    )),
                GestureDetector(
                  child: _camera == false
                      ? Image.asset(
                          "assets/icons/svg/video_camera.png",
                          height: 3.h,
                          width: 3.h,
                        )
                      : Image.asset(
                          "assets/icons/svg/camera.png",
                          height: 3.h,
                          width: 3.h,
                        ),
                  onTap: () => toggleCamera(),
                ),
                GestureDetector(
                    onTap: _onToggleMute,
                    child: _muted == false
                        ? Image.asset('assets/icons/svg/mic_off.png',
                            height: 3.h, width: 3.h)
                        : Image.asset(
                            'assets/icons/svg/mic.png',
                            height: 3.h,
                            width: 3.h,
                          )),
                GestureDetector(
                  onTap: () => _onCallEnd(context),
                  child: Container(
                      decoration: BoxDecoration(
                          color: const Color(0xffca2424),
                          borderRadius: BorderRadius.circular(10)),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 10.0, vertical: 5),
                      child: Row(
                        children: [
                          Image.asset(
                            'assets/icons/svg/phone_call.png',
                            height: 3.h,
                            width: 3.h,
                            color: Colors.white,
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          Text(
                            "Leave",
                            style: TextStyle(
                                fontSize: 13.sp,
                                fontWeight: FontWeight.bold,
                                color: Colors.white),
                          )
                        ],
                      )),
                ),
                //  Text(_message),
              ],
            ),
          ));
    });
  }

  Widget _renderLocalPreview() {
    if (_joined) {
      return Container(
          padding: const EdgeInsets.all(0),
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              color: Colors.transparent),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: const rtc_local_view.SurfaceView(),
          ));
    } else {
      return const Text(
        'Please join channel first',
        textAlign: TextAlign.center,
      );
    }
  }

  void _onCallEnd(BuildContext context) async {
    //Navigator.pop(context);
    _fcmapicall(
      msg: 'video',
      callId: '',
      type: 'cut',
      action: 'end_call',
    );
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('video_call', callFree);
    Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => const BottomNavbar(index: 2)),
        (Route<dynamic> route) => false);
  }

  void _onSwitchCamera() {
    _engine.switchCamera();
  }

  void _onToggleMute() {
    _engine.muteLocalAudioStream(_muted);
    setState(() {
      _muted = !_muted;
    });
  }

  void _onToggleVolume() {
    setState(() {
      _isOnSpeaker = !_isOnSpeaker;
    });
    _engine.muteAllRemoteAudioStreams(_isOnSpeaker);
  }

  Future<void> toggleCamera() async {
    _engine.muteLocalVideoStream(_camera);
    setState(() {
      _camera = !_camera;
    });
  }

  // Remote preview
  Widget _renderRemoteVideo() {
    if (_remoteUid != 0) {
      return _rtc_remote_view.SurfaceView(
        uid: _remoteUid,
        channelId: widget.channelName,
      );
    } else {
      return Container();
    }
  }

  void _getToken(callId) async {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  EasyLoading.show(),
                  ApiRepository()
                      .receivevideocallapi(callId, value)
                      .then((value) {
                    EasyLoading.dismiss();
                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          // setState(() {
                          _appId = value.body.appid;
                          _appToken = value.body.callToken;
                          _channalname = value.body.callChannel;
                          // _calleename = value.body.calleeName;
                          // });
                          if (_hasBuildCalled) {
                            setState(() {});
                          }
                          initPlatformState(context);
                        }
                      }
                    }
                  })
                }
            });
  }

  void _fcmapicall({String msg, String callId, String type, String action}) {
    Helper.checkConnectivity().then((value) => {
          if (value)
            {
              ApiRepository()
                  .sendFCMCallTrigger(
                      action: action,
                      body: msg,
                      otherUserFcmToken: widget.calleeFcmToken,
                      myFcmToken: widget.devicefcmtoken,
                      userProfileUrl: widget.userprofileimage,
                      callId: callId,
                      type: type,
                      fromId: _loginData.id.toString(),
                      title: _loginData.name)
                  .then((value) async {
                if (value != null && action == 'start_call') {
                  debugPrint(value.toJson().toString());
                }
              }),

              // ApiRepository()
              //     .sendFCMPush(
              //         message: msg,
              //         name: _loginData.name,
              //         token: fcmtoken,
              //         image: image,
              //         callId: call_id,
              //         type: type,
              //         fcmtoken: widget.devicefcmtoken,
              //         userprofile: widget.userprofileimage,
              //         datetime: "",
              //         userpeerid: "senderpeerid",
              //         senderpeerid: "receiverpeerid",
              //         textid: "textid")
              //     .then((value) async {})
            }
          else
            {Helper.showNoConnectivityDialog(context)}
        });
  }

  Future<void> _callinsert(
      String calleeName, String calltype, String callId) async {
    // row to insert
    Map<String, dynamic> row = {
      DatabaseHelper.Id: null,
      DatabaseHelper.calleeName: calleeName,
      DatabaseHelper.timestamp: DateTime.now().toString(),
      DatabaseHelper.calltype: calltype,
      DatabaseHelper.Calldrm: CallType.dialed,
      DatabaseHelper.Callid: '',
    };
    final id = await _dbHelper.callinsert(row);
    // debugPrint('inserted row id: $id');
    return id;
  }

  void _audioply() async {
    String audioasset = "assets/audio/Basic.mp3";
    ByteData bytes = await rootBundle.load(audioasset); //load sound from assets
    Uint8List soundbytes =
        bytes.buffer.asUint8List(bytes.offsetInBytes, bytes.lengthInBytes);
    // int result = await player.earpieceOrSpeakersToggle();
    int result = await _player.playBytes(soundbytes);
    if (result == 1) {
      //play success
      debugPrint("Sound playing successful.");
    } else {
      debugPrint("Error while playing sound.");
    }
  }
}
