import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:evidya/constants/color_constant.dart';
import 'package:evidya/constants/string_constant.dart';
import 'package:evidya/main.dart';
import 'package:evidya/model/chat_model.dart';
import 'package:evidya/network/repository/api_repository.dart';
import 'package:evidya/notificationservice/LocalNotificationService.dart';
import 'package:evidya/sharedpref/preference_connector.dart';
import 'package:file_picker/file_picker.dart';
// import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/services.dart';
import 'package:agora_rtm/agora_rtm.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:evidya/localdb/databasehelper.dart';
import 'package:evidya/model/login/autogenerated.dart';
// import 'package:evidya/model/login/contactsmatch_Modal.dart';
import 'package:evidya/resources/app_colors.dart';
// import 'package:evidya/screens/messenger/logs.dart';
import 'package:evidya/utils/helper.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sizer/sizer.dart';
import 'package:swipe_to/swipe_to.dart';
// import 'package:video_player/video_player.dart';
import '../../../model/GroupListModal.dart';
import '../../../widget/gradient_bg_view.dart';
import '../../bottom_navigation/bottom_navigaction_bar.dart';
import '../fullscreenimage.dart';
import '../msgvideoplayer.dart';
import '../pdfviewer.dart';
import 'group_profile.dart';

class GroupChatScreen extends StatefulWidget {
  final AgoraRtmClient client;
  final String rtmpeerid;
  final List<Members> membersList;
  final Groups recentchatuserdetails;
  final Self self;
  final bool isDirect;

  const GroupChatScreen({
    Key key,
    this.client,
    // this.channel,
    // this.logController,
    // this.userdetails,
    this.membersList,
    // this.messagePeerId,
    this.rtmpeerid,
    this.recentchatuserdetails,
    this.self,
    this.isDirect = false,
    // this.groupmessagelog
  }) : super(key: key);

  @override
  _GroupChatScreenState createState() => _GroupChatScreenState();
}

class _GroupChatScreenState extends State<GroupChatScreen>
    with WidgetsBindingObserver {
  final _peerMessage = TextEditingController();
  final ScrollController _controller = ScrollController();
  // VideoPlayerController _videoPlayerController;
  var onlinestatus = "offline";
  String replytex = "", username;
  List groupMembers = [];
  // File _video;
  bool replyvisibility = false;
  final dbHelper = DatabaseHelper.instance;
  // MessageLog messagelog = MessageLog();
  final picker = ImagePicker();
  RegExp fileExp = RegExp(r"([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg)");
  bool afile = false;
  Timer timer;
  LocalDataModal _loginData;
  String userpeerid;
  dynamic profileJson;
  String recieptPerson;
  String message = "";
  String replyPath = '';
  int length = 0;

  bool _sendingMessage = false;
  bool _hasRebuildCalled = false;

  @override
  void initState() {
    // _isUserOnline();
    // Timer.periodic(const Duration(seconds: 10), (timer) {
    //   _isUserOnline();
    // });
    queryRowCount();
    localdata();

    super.initState();
    recieptPerson = widget.recentchatuserdetails.groupName;
    final code = widget.rtmpeerid.hashCode;
    LocalNotificationService.clearPool(code);
    // _query();
  }

  void _delete(msgid, index) async {
    var rowsDeleted;
    rowsDeleted = await dbHelper.deletemsg(msgid);
    debugPrint(rowsDeleted.toString() + 'row deleted' + index.toString());
    groupChatLogController.removeLog(index);
  }

  AgoraRtmClient _client;
  Future<AgoraRtmClient> _createClient() async {
    if (_client != null) {
      return _client;
    }
    if (widget.client != null) {
      return widget.client;
    }

    try {
      _client = await AgoraRtmClient.createInstance(
          'd6306b59624c4e458883be16f5e6cbd2');
      String value = await PreferenceConnector.getJsonToSharedPreferencetoken(
          StringConstant.loginData);
      if (value != null) {
        final result = await ApiRepository().Messanger_rtmtoken(value);
        await _client.login(result.body.rtmToken, result.body.rtmUser);
      }
    } catch (_) {}
    // widget.client = await AgoraRtmClient.createInstance(appId);
    return _client;
  }

  void queryRowCount() async {
    final value =
        await PreferenceConnector.getJsonToSharedPreferenceertmuserpeerid(
            StringConstant.rtmuserpeerid);
    if (value == null) {
      return;
    }
    userpeerid = value;
    final allRows = await dbHelper.groupqueryRowCount(
        widget.rtmpeerid.toString(),
        userpeerid.toString(),
        widget.recentchatuserdetails.groupName);
    for (var row in allRows) {
      if (row != null) {
        ChatModel model = ChatModel(
            id: row['id'] == null ? '' : row['id'].toString(),
            message: row['message'],
            from: row['from_id'],
            to: row['to_id'],
            group: row['groupname'],
            // deliveryStatus: row['deliveryStatus'],
            diraction: row['diraction'],
            reply: row['reply'],
            replyText: row['reply_text'],
            textId: row['textid'],
            timestamp: row['timestamp'],
            url: row['url'] ?? '',
            type: row['type']);
        groupChatLogController.addLog(model);
      }
    }
    if (_hasRebuildCalled) {
      setState(() {
        _controller.animateTo(_controller.position.maxScrollExtent,
            duration: const Duration(milliseconds: 300), curve: Curves.easeOut);
      });
    }
    // debugPrint('query all rows:$allRows');
//     allRows.forEach((row) => {
//           if (row != null)
//             {
// // ChatModel model = ChatMode();
//               widget.logController.addGroupLog(row["message"] +
//                   row["diraction"] +
//                   "#@####@#" +
//                   row['type1'] +
//                   "#@####@#" +
//                   row["timestamp"] +
//                   "#@####@#" +
//                   row["id"].toString() +
//                   "#@####@#" +
//                   row["to1"] +
//                   "#@####@#" +
//                   row["groupname"]),
//               setState(() {
//                 _controller.animateTo(_controller.position.maxScrollExtent,
//                     duration: const Duration(milliseconds: 300),
//                     curve: Curves.easeOut);
//               }),
//             }
//         });
  }

  @override
  void dispose() async {
    groupChatLogController.value.clear();
    replytex = '';
    timer?.cancel();
    dbHelper.deletebadge(widget.rtmpeerid);
    PreferenceConnector().setCurrentChatUserName("");
    SharedPreferences.getInstance()
        .then((value) => value.setString('action', ""));

    super.dispose();
  }

  @override
  void deactivate() {
    groupMessageLog.removegroupLog(widget.recentchatuserdetails.groupName);
    super.deactivate();
  }

  @override
  Widget build(BuildContext context) {
    _hasRebuildCalled = true;
    return GradientColorBgView(
      child: SafeArea(
        child: Scaffold(
            backgroundColor: Colors.transparent,
            appBar: PreferredSize(
                preferredSize: Size.fromHeight(11.h),
                // here the desired height
                child: Column(
                  children: [
                    Container(
                        padding: EdgeInsets.symmetric(
                            horizontal: 1.h, vertical: 1.h),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                InkWell(
                                    onTap: () async {
                                      await dbHelper
                                          .deletebadge(widget.rtmpeerid);
                                      if (widget.isDirect) {
                                        Navigator.pushAndRemoveUntil(
                                            context,
                                            MaterialPageRoute(
                                                builder: (context) =>
                                                    const BottomNavbar(
                                                        index: 2)),
                                            (Route<dynamic> route) => false);
                                      } else {
                                        Navigator.pop(context);
                                      }
                                    },
                                    child: const CircleAvatar(
                                      backgroundColor: Colors.transparent,
                                      radius: 18,
                                      child: Icon(
                                        Icons.keyboard_backspace,
                                        size: 20,
                                        color: Colors.white,
                                      ),
                                    )),
                                SizedBox(
                                  width: 1.h,
                                ),
                                InkWell(
                                  child: Row(
                                    children: [
                                      Container(
                                        height: 7.h,
                                        width: 15.w,
                                        decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(10),
                                          color: Colors.transparent,
                                        ),
                                        child: ClipRRect(
                                          borderRadius:
                                              BorderRadius.circular(50),
                                          child: CircleAvatar(
                                            radius: 25,
                                            backgroundColor:
                                                AppColors.appNewDarkThemeColor,
                                            child: Center(
                                                child: widget
                                                            .recentchatuserdetails
                                                            .image !=
                                                        null
                                                    ? CachedNetworkImage(
                                                        imageUrl: StringConstant
                                                                .IMAGE_URL +
                                                            widget
                                                                .recentchatuserdetails
                                                                .image,
                                                        imageBuilder: (context,
                                                                imageProvider) =>
                                                            Container(
                                                          decoration:
                                                              BoxDecoration(
                                                            image: DecorationImage(
                                                                image:
                                                                    imageProvider,
                                                                fit: BoxFit
                                                                    .cover /*,
                                                          colorFilter: const ColorFilter.mode(Colors.red, BlendMode.colorBurn)*/
                                                                ),
                                                          ),
                                                        ),
                                                        height: 30.h,
                                                        width: 40.w,
                                                        placeholder: (context,
                                                                url) =>
                                                            const CircularProgressIndicator(),
                                                        errorWidget: (context,
                                                                url, error) =>
                                                            const Icon(
                                                          Icons.error,
                                                          size: 50,
                                                        ),
                                                      )
                                                    : Text(
                                                        widget
                                                            .recentchatuserdetails
                                                            .groupName[0],
                                                        textAlign:
                                                            TextAlign.center,
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: 15.sp))),
                                          ),
                                        ),
                                      ),
                                      SizedBox(
                                        width: 1.h,
                                      ),
                                      Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            widget.recentchatuserdetails
                                                .groupName,
                                            style: TextStyle(
                                                fontSize: 16.sp,
                                                color: Colors.white,
                                                fontWeight: FontWeight.bold),
                                          ),
                                          SizedBox(
                                            width: 60.w,
                                            child: Text(
                                              groupMembers.join(", "),
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: TextStyle(
                                                  fontSize: 11.sp,
                                                  color: Colors.white),
                                            ),
                                          )
                                        ],
                                      ),
                                    ],
                                  ),
                                  onTap: () {
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) =>
                                              GroupProfilePage(
                                                senderName: widget
                                                    .recentchatuserdetails
                                                    .groupName,
                                                groupmember: widget
                                                    .recentchatuserdetails
                                                    .members,
                                                groupimage: widget
                                                    .recentchatuserdetails
                                                    .image,
                                                groupid: widget
                                                    .recentchatuserdetails.id,
                                                self: widget.self,
                                                groupadmin: widget
                                                    .recentchatuserdetails
                                                    .groupAdmin,
                                                // logController:
                                                //     widget.logController,
                                              )),
                                    ).then((value) => setState(() {
                                          debugPrint("sdsd back");
                                        }));
                                  },
                                ),
                              ],
                            ),
                          ],
                        )),
                  ],
                )),
            body: Container(
              height: MediaQuery.of(context).size.height,
              width: MediaQuery.of(context).size.width,
              decoration: const BoxDecoration(
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
                color: Colors.transparent,
                image: DecorationImage(
                    image: AssetImage("assets/images/grey_background.jpg"),
                    fit: BoxFit.fill),
              ),
              child: Column(
                children: <Widget>[
                  Expanded(
                      child: Padding(
                    padding:
                        EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                    child: Column(
                      children: <Widget>[
                        ValueListenableBuilder(
                          valueListenable: groupChatLogController,
                          builder: (context, log, wdgt) {
                            if (log.length >= length) {
                              _scrollDown(log.length);
                              length++;
                            }
                            return Expanded(
                              child: ListView.separated(
                                controller: _controller,
                                reverse: false,
                                shrinkWrap: true,
                                // ignore: missing_return
                                itemBuilder: (context, i) {
                                  // dynamic parts = log[i].split('#@####@#');
                                  ChatModel model = log[i];
                                  if (model.group.isNotEmpty) {
                                    // debugPrint("pars$parts");
                                    if (model.group ==
                                        widget
                                            .recentchatuserdetails.groupName) {
                                      // if (parts.length > 0)
                                      // {
                                      if (model.type != null &&
                                          model.type != 'image') {
                                        return SwipeTo(
                                            child: Container(
                                                padding: const EdgeInsets.only(
                                                    right: 0.0,
                                                    left: 0.0,
                                                    top: 0,
                                                    bottom: 0),
                                                alignment:
                                                    (model.diraction != 'send'
                                                        ? Alignment.topLeft
                                                        : Alignment.topRight),
                                                child: Row(
                                                  crossAxisAlignment:
                                                      CrossAxisAlignment.start,
                                                  mainAxisAlignment: model
                                                              .diraction !=
                                                          'send'
                                                      ? MainAxisAlignment.start
                                                      : MainAxisAlignment.end,
                                                  children: [
                                                    if (model.diraction ==
                                                        'Receive')
                                                      usershort(model.from),
                                                    const SizedBox(width: 10),
                                                    Container(
                                                      constraints:
                                                          BoxConstraints(
                                                              minWidth: 30.w,
                                                              maxWidth: 60.w),
                                                      padding:
                                                          const EdgeInsets.all(
                                                              0),
                                                      decoration: model
                                                                  .diraction !=
                                                              'send'
                                                          ? const BoxDecoration(
                                                              color: Colors
                                                                  .black12,
                                                              borderRadius:
                                                                  BorderRadius
                                                                      .only(
                                                                //topLeft: Radius.circular(10),
                                                                topRight: Radius
                                                                    .circular(
                                                                        10),
                                                                bottomLeft: Radius
                                                                    .circular(
                                                                        10),
                                                                bottomRight:
                                                                    Radius
                                                                        .circular(
                                                                            10),
                                                              ))
                                                          : const BoxDecoration(
                                                              gradient:
                                                                  LinearGradient(
                                                                begin: Alignment
                                                                    .topCenter,
                                                                end: Alignment
                                                                    .bottomCenter,
                                                                colors: [
                                                                  Color(
                                                                      0xFF901133),
                                                                  Color(
                                                                      0xFF5c0e35)
                                                                ],
                                                              ),
                                                              borderRadius:
                                                                  BorderRadius
                                                                      .only(
                                                                topLeft: Radius
                                                                    .circular(
                                                                        10),
                                                                bottomLeft: Radius
                                                                    .circular(
                                                                        10),
                                                                bottomRight:
                                                                    Radius
                                                                        .circular(
                                                                            10),
                                                              ),
                                                            ),
                                                      child: GestureDetector(
                                                        onLongPressUp: () {
                                                          _askFavColor(model.id,
                                                              model.message, i);
                                                        },
                                                        onTap: () {
                                                          if (model.type ==
                                                              "doc") {
                                                            Navigator.of(
                                                                    context)
                                                                .push(
                                                              MaterialPageRoute(
                                                                  builder: (context) =>
                                                                      Pdfviewer(
                                                                          pdfpath:
                                                                              model.url)),
                                                            );
                                                          } else if (model
                                                                  .type ==
                                                              "video") {
                                                            Navigator.of(
                                                                    context)
                                                                .push(
                                                              MaterialPageRoute(
                                                                builder: (context) =>
                                                                    Msgvideoplayer(
                                                                        videourl:
                                                                            model.url),
                                                              ),
                                                            );
                                                          } else if (model
                                                                      .type ==
                                                                  "image" ||
                                                              model.type ==
                                                                  'network') {
                                                            Navigator.of(
                                                                    context)
                                                                .push(
                                                              MaterialPageRoute(
                                                                builder: (context) =>
                                                                    FullScreenImage(
                                                                        image: model
                                                                            .url),
                                                              ),
                                                            );
                                                          }
                                                          //  else if (model
                                                          //         .type ==
                                                          //     'network') {
                                                          //   Navigator.of(
                                                          //           context)
                                                          //       .push(
                                                          //     MaterialPageRoute(
                                                          //       builder: (context) =>
                                                          //           FullScreenImage(
                                                          //               image: model
                                                          //                   .url),
                                                          //     ),
                                                          //   );
                                                          // }
                                                        },
                                                        child: Padding(
                                                            padding:
                                                                const EdgeInsets
                                                                    .all(5.0),
                                                            child: model
                                                                            .type ==
                                                                        "text" ||
                                                                    model.type ==
                                                                        "doc" ||
                                                                    model.type ==
                                                                        "video"
                                                                ? Stack(
                                                                    children: [
                                                                      Column(
                                                                        crossAxisAlignment:
                                                                            CrossAxisAlignment.start,
                                                                        children: <
                                                                            Widget>[
                                                                          if (model.diraction ==
                                                                              "Receive")
                                                                            sendername(model.from),
                                                                          Row(children: [
                                                                            if (model.type == "doc" ||
                                                                                model.type == "video")
                                                                              typeicons(model.type),
                                                                            model.reply == 'reply'
                                                                                ? Container(
                                                                                    margin: const EdgeInsets.only(left: 8.0, right: 8.0, top: 8.0),
                                                                                    decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(8.0)),
                                                                                    child: IntrinsicHeight(
                                                                                        child: Container(
                                                                                      constraints: BoxConstraints(minWidth: 10.w, maxWidth: 40.w),
                                                                                      decoration: BoxDecoration(
                                                                                        color: const Color(0xFFf8ece8),
                                                                                        borderRadius: BorderRadius.circular(8.0),
                                                                                      ),
                                                                                      child: Row(
                                                                                        mainAxisSize: MainAxisSize.min,
                                                                                        children: [
                                                                                          Container(
                                                                                            decoration: BoxDecoration(
                                                                                              color: model.diraction != 'send' ? const Color(0xFF800000) : Colors.white,
                                                                                              borderRadius: const BorderRadius.only(
                                                                                                bottomLeft: Radius.circular(30.0),
                                                                                                topLeft: Radius.circular(30.0),
                                                                                              ),
                                                                                            ),
                                                                                            width: 5.0,
                                                                                          ),
                                                                                          const SizedBox(
                                                                                            height: 5,
                                                                                          ),
                                                                                          Expanded(
                                                                                            child: Container(
                                                                                                padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                                                                                                decoration: const BoxDecoration(
                                                                                                  color: Color(0xFFf8ece8),
                                                                                                  borderRadius: BorderRadius.only(
                                                                                                    bottomRight: Radius.circular(30.0),
                                                                                                    topRight: Radius.circular(30.0),
                                                                                                  ),
                                                                                                ),
                                                                                                child: Column(
                                                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                                                  children: [
                                                                                                    model.diraction != 'send'
                                                                                                        ? const Text(
                                                                                                            "You",
                                                                                                            style: TextStyle(
                                                                                                              fontSize: 14.0,
                                                                                                              fontWeight: FontWeight.w600,
                                                                                                              color: Colors.black,
                                                                                                            ),
                                                                                                          )
                                                                                                        : const Text(
                                                                                                            "reply",
                                                                                                            style: TextStyle(
                                                                                                              fontSize: 14.0,
                                                                                                              fontWeight: FontWeight.w600,
                                                                                                              color: Colors.black,
                                                                                                            ),
                                                                                                          ),
                                                                                                    Row(
                                                                                                      children: [
                                                                                                        const Icon(
                                                                                                          Icons.description_outlined,
                                                                                                          color: Colors.yellow,
                                                                                                        ),
                                                                                                        Text(
                                                                                                          // 'unknown part',
                                                                                                          model.replyText,
                                                                                                          // parts[2] != "" ? parts[2] : parts[1],
                                                                                                          style: TextStyle(
                                                                                                            fontSize: 14.0,
                                                                                                            color: AppColors.cardContainerColor,
                                                                                                          ),
                                                                                                        ),
                                                                                                      ],
                                                                                                    )
                                                                                                  ],
                                                                                                )),
                                                                                          ),
                                                                                        ],
                                                                                      ),
                                                                                    )),
                                                                                  )
                                                                                : Container(),
                                                                          ]),
                                                                          Padding(
                                                                            padding: const EdgeInsets.only(
                                                                                left: 8.0,
                                                                                right: 8.0,
                                                                                top: 5.0,
                                                                                bottom: 5),
                                                                            child:
                                                                                Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.end, children: [
                                                                              Expanded(
                                                                                child: model.reply == "noreplay"
                                                                                    ? textwidget(model.message, model.type, model.diraction)
                                                                                    : model.reply != ""
                                                                                        ? textwidget(model.message, model.type, model.diraction)
                                                                                        : textwidget(model.message, model.type, model.diraction),
                                                                              ),
                                                                            ]),
                                                                          )
                                                                        ],
                                                                      ),
                                                                      Positioned(
                                                                        bottom:
                                                                            -3,
                                                                        right:
                                                                            1,
                                                                        child:
                                                                            Align(
                                                                          alignment:
                                                                              Alignment.bottomRight,
                                                                          child:
                                                                              Row(
                                                                            mainAxisAlignment:
                                                                                MainAxisAlignment.end,
                                                                            crossAxisAlignment:
                                                                                CrossAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                DateFormat('hh:mm a').format(DateTime.parse(model.timestamp)),
                                                                                style: TextStyle(color: model.diraction != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                                textAlign: TextAlign.end,
                                                                              ),
                                                                              SizedBox(
                                                                                width: 1.w,
                                                                              ),
                                                                              //  parts[4] != 'send' ? Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : AppColors.redDarkColor, size: 15,) : Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : Colors.white, size: 15,),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      )
                                                                    ],
                                                                  )
                                                                : Column(
                                                                    children: [
                                                                      if ((model.type == "image" ||
                                                                              model.type ==
                                                                                  "network") &&
                                                                          model.url?.isNotEmpty ==
                                                                              true &&
                                                                          !model.url.startsWith(
                                                                              "http"))
                                                                        Image.file(
                                                                            File(model
                                                                                .url),
                                                                            fit:
                                                                                BoxFit.cover,
                                                                            errorBuilder: (context, url, error) => const Icon(
                                                                                  Icons.error,
                                                                                  size: 70,
                                                                                  color: Colors.red,
                                                                                  semanticLabel: "image not found",
                                                                                )),
                                                                      if ((model.type == "image" ||
                                                                              model.type ==
                                                                                  "network") &&
                                                                          model.url?.isNotEmpty ==
                                                                              true &&
                                                                          model
                                                                              .url
                                                                              .startsWith("http"))
                                                                        CachedNetworkImage(
                                                                          imageUrl:
                                                                              model.url,
                                                                          fit: BoxFit
                                                                              .cover,
                                                                          /*height: 40.h,
                                                                        width: 60.w,*/
                                                                          placeholder: (context, url) =>
                                                                              LinearProgressIndicator(
                                                                            minHeight:
                                                                                20.sp,
                                                                          ),
                                                                          errorWidget: (context, url, error) =>
                                                                              const Icon(
                                                                            Icons.error,
                                                                            size:
                                                                                50,
                                                                          ),
                                                                        ),
                                                                      const SizedBox(
                                                                          height:
                                                                              10),
                                                                      Row(
                                                                          mainAxisAlignment:
                                                                              MainAxisAlignment.end,
                                                                          children: [
                                                                            Text(
                                                                              DateFormat('hh:mm a').format(DateTime.parse(model.timestamp)),
                                                                              style: TextStyle(color: model.diraction != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                              textAlign: TextAlign.right,
                                                                            ),
                                                                            SizedBox(
                                                                              width: 1.w,
                                                                            ),
                                                                            // parts[4] != 'send' ? Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : AppColors.redDarkColor, size: 15,) : Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : Colors.white, size: 15,),
                                                                          ]),
                                                                    ],
                                                                  )),
                                                      ),
                                                    ),
                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                    if (model.diraction ==
                                                        'send')
                                                      CircleAvatar(
                                                        backgroundColor:
                                                            const Color(
                                                                0xFF901133),
                                                        child: Text(
                                                            "${_loginData.name[0]}",
                                                            style:
                                                                const TextStyle(
                                                                    color: Colors
                                                                        .white)),
                                                      ),
                                                  ],
                                                )),
                                            onLeftSwipe: () {
                                              // debugPrint(
                                              //     'Callback from Swipe To Right' +
                                              //         parts[4] +
                                              //         parts[1]);
                                              setState(() {
                                                replyvisibility = true;
                                                replytex = model.message;
                                                if (model.url?.isNotEmpty ==
                                                    true) {
                                                  replyPath = model.url;
                                                  afile = fileExp
                                                      .hasMatch(model.url);
                                                  // debugPrint(afile);
                                                }
                                              });
                                            });
                                      } else {
                                        return Container(
                                          padding: const EdgeInsets.only(
                                              right: 0.0,
                                              left: 0.0,
                                              top: 2,
                                              bottom: 2),
                                          alignment: (model.diraction != 'send'
                                              ? Alignment.topLeft
                                              : Alignment.topRight),
                                          child: GestureDetector(
                                            onLongPressUp: () {
                                              _askFavColor(
                                                  model.id, model.message, i);
                                            },
                                            onTap: () {
                                              Navigator.of(context).push(
                                                  MaterialPageRoute(
                                                      builder: (context) =>
                                                          FullScreenImage(
                                                              image:
                                                                  model.url)));
                                            },
                                            child: Padding(
                                                padding:
                                                    const EdgeInsets.all(5.0),
                                                child: Row(
                                                  crossAxisAlignment:
                                                      CrossAxisAlignment.start,
                                                  mainAxisAlignment: model
                                                              .diraction !=
                                                          'send'
                                                      ? MainAxisAlignment.start
                                                      : MainAxisAlignment.end,
                                                  children: [
                                                    if (model.diraction ==
                                                        'Receive')
                                                      usershort(model.from),
                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                    Expanded(
                                                        child:
                                                            model.type == "text"
                                                                ? Column(
                                                                    crossAxisAlignment:
                                                                        CrossAxisAlignment
                                                                            .start,
                                                                    children: <
                                                                        Widget>[
                                                                      model.reply ==
                                                                              'reply'
                                                                          ? Container(
                                                                              decoration: BoxDecoration(color: Colors.grey, borderRadius: BorderRadius.circular(8.0)),
                                                                              child: Column(
                                                                                children: [
                                                                                  IntrinsicHeight(
                                                                                    child: Row(
                                                                                      children: [
                                                                                        Container(
                                                                                          decoration: const BoxDecoration(
                                                                                            color: Colors.red,
                                                                                            borderRadius: BorderRadius.only(
                                                                                              bottomLeft: Radius.circular(30.0),
                                                                                              topLeft: Radius.circular(30.0),
                                                                                            ),
                                                                                          ),
                                                                                          width: 5.0,
                                                                                        ),
                                                                                        Expanded(
                                                                                          child: Padding(
                                                                                            padding: const EdgeInsets.all(7.0),
                                                                                            child: Container(
                                                                                              decoration: BoxDecoration(
                                                                                                // color: Colors.grey,
                                                                                                borderRadius: BorderRadius.circular(8.0),
                                                                                              ),
                                                                                              child: Column(
                                                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                                                children: [
                                                                                                  const Text(
                                                                                                    "Reply",
                                                                                                    style: TextStyle(
                                                                                                      fontSize: 18.0,
                                                                                                      color: Colors.red,
                                                                                                    ),
                                                                                                  ),
                                                                                                  Text(
                                                                                                    'replayed message' + replytex,
                                                                                                    style: const TextStyle(
                                                                                                      fontSize: 14.0,
                                                                                                      color: Colors.black,
                                                                                                    ),
                                                                                                  )
                                                                                                ],
                                                                                              ),
                                                                                            ),
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ],
                                                                              ),
                                                                            )
                                                                          : Container(),
                                                                      Text(
                                                                        model
                                                                            .message
                                                                            .trim(),
                                                                        style: TextStyle(
                                                                            color: model.diraction != 'send'
                                                                                ? Colors.black
                                                                                : Colors.white,
                                                                            fontSize: 16),
                                                                        textAlign:
                                                                            TextAlign.left,
                                                                      )
                                                                    ],
                                                                  )
                                                                : Container(
                                                                    constraints: BoxConstraints(
                                                                        minWidth: 30
                                                                            .w,
                                                                        maxWidth:
                                                                            60.w),
                                                                    alignment: (model.diraction !=
                                                                            'send'
                                                                        ? Alignment
                                                                            .topLeft
                                                                        : Alignment
                                                                            .topRight),
                                                                    child:
                                                                        Column(
                                                                      children: [
                                                                        // Icon(Icons.error,color:Colors.yellow,size:10.sp,),
                                                                        if (model.diraction ==
                                                                            "Receive")
                                                                          sendername(
                                                                              model.from),
                                                                        Column(
                                                                          crossAxisAlignment:
                                                                              CrossAxisAlignment.start,
                                                                          children: [
                                                                            model.type == "image"
                                                                                ? ClipRRect(
                                                                                    borderRadius: const BorderRadius.only(
                                                                                      topLeft: Radius.circular(10),
                                                                                      //topRight: Radius.circular(10),
                                                                                      bottomLeft: Radius.circular(10),
                                                                                      bottomRight: Radius.circular(10),
                                                                                    ),
                                                                                    child: Image.file(File(model.url),
                                                                                        height: 40.h,
                                                                                        width: 60.w,
                                                                                        fit: BoxFit.fill,
                                                                                        errorBuilder: (context, url, error) => const Icon(
                                                                                              Icons.error,
                                                                                              size: 70,
                                                                                              color: Colors.red,
                                                                                              semanticLabel: "image not found",
                                                                                            )),
                                                                                  )
                                                                                : CachedNetworkImage(
                                                                                    imageUrl: model.url,
                                                                                    fit: BoxFit.cover,
                                                                                    placeholder: (context, url) => LinearProgressIndicator(
                                                                                      minHeight: 20.sp,
                                                                                    ),
                                                                                    errorWidget: (context, url, error) => const Icon(
                                                                                      Icons.error,
                                                                                      size: 50,
                                                                                    ),
                                                                                  ),
                                                                          ],
                                                                        ),
                                                                        SizedBox(
                                                                          width:
                                                                              60.w,
                                                                          child:
                                                                              Align(
                                                                            alignment:
                                                                                Alignment.bottomRight,
                                                                            child:
                                                                                Row(
                                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                                              children: [
                                                                                Text(
                                                                                  DateFormat('hh:mm a').format(DateTime.parse(model.timestamp)),
                                                                                  style: TextStyle(color: model.diraction != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                                  textAlign: TextAlign.end,
                                                                                ),
                                                                                SizedBox(width: 1.w),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  )),
                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                    if (model.diraction ==
                                                        'send')
                                                      CircleAvatar(
                                                        backgroundColor:
                                                            const Color(
                                                                0xFF901133),
                                                        child: Text(
                                                            "${_loginData.name[0]}",
                                                            style:
                                                                const TextStyle(
                                                                    color: Colors
                                                                        .white)),
                                                      ),
                                                  ],
                                                )),
                                          ),
                                        );
                                      }
                                      // } else {
                                      //   return null;
                                      // }
                                    } else {
                                      return null;
                                    }
                                  }
                                },
                                itemCount: log.length,
                                separatorBuilder:
                                    (BuildContext context, int index) =>
                                        SizedBox(
                                  height: 2.h,
                                ),
                              ),
                            );
                          },
                        )
                      ],
                    ),
                  )),
                  //SizedBox(height: 10,),
                  Align(
                      alignment: Alignment.bottomCenter,
                      child: Container(
                        decoration: const BoxDecoration(
                            //borderRadius: BorderRadius.circular(30),
                            gradient: LinearGradient(
                          //begin: Alignment.center,
                          // end: Alignment.center,
                          stops: [0.0, 0.8],
                          tileMode: TileMode.clamp,
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            Color(0xFF901133),
                            Color(0xFF5c0e35),
                          ],
                        )),
                        padding: const EdgeInsets.symmetric(
                            vertical: 5, horizontal: 5),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            Expanded(
                                child: Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 0,
                                vertical: 0,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: replyvisibility == true
                                    ? const BorderRadius.only(
                                        topLeft: Radius.circular(10),
                                        topRight: Radius.circular(10),
                                        bottomLeft: Radius.circular(10),
                                        bottomRight: Radius.circular(10),
                                      )
                                    : BorderRadius.circular(10.0),
                              ),
                              child: Column(
                                children: <Widget>[
                                  Visibility(
                                    visible: replyvisibility,
                                    child: Container(
                                      margin: const EdgeInsets.only(
                                          left: 8.0, right: 8.0, top: 8.0),
                                      decoration: BoxDecoration(
                                        color: ColorConstant.replaybluegray,
                                        borderRadius:
                                            BorderRadius.circular(8.0),
                                      ),
                                      child: Column(
                                        children: [
                                          IntrinsicHeight(
                                            child: Row(
                                              children: [
                                                Container(
                                                  decoration:
                                                      const BoxDecoration(
                                                    color: Colors.red,
                                                    borderRadius:
                                                        BorderRadius.only(
                                                      bottomLeft:
                                                          Radius.circular(30.0),
                                                      topLeft:
                                                          Radius.circular(30.0),
                                                    ),
                                                  ),
                                                  width: 5.0,
                                                ),
                                                Expanded(
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            7.0),
                                                    child: Container(
                                                      decoration: BoxDecoration(
                                                        // color: Colors.grey,
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(8.0),
                                                      ),
                                                      child: Column(
                                                        crossAxisAlignment:
                                                            CrossAxisAlignment
                                                                .start,
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment:
                                                                MainAxisAlignment
                                                                    .spaceBetween,
                                                            children: <Widget>[
                                                              Text(
                                                                "Reply",
                                                                style:
                                                                    TextStyle(
                                                                  fontSize:
                                                                      13.sp,
                                                                  fontWeight:
                                                                      FontWeight
                                                                          .bold,
                                                                  color: Colors
                                                                      .red,
                                                                ),
                                                              ),
                                                              IconButton(
                                                                padding:
                                                                    EdgeInsets
                                                                        .zero,
                                                                constraints:
                                                                    const BoxConstraints(),
                                                                onPressed: () {
                                                                  setState(() {
                                                                    replyvisibility =
                                                                        false;
                                                                    replytex =
                                                                        "";
                                                                  });
                                                                },
                                                                icon:
                                                                    const Icon(
                                                                  Icons.close,
                                                                  size: 20,
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                          images(),
                                                        ],
                                                      ),
                                                    ),
                                                  ),
                                                )
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  ConstrainedBox(
                                    constraints: const BoxConstraints(
                                      maxHeight: 105.0,
                                    ),
                                    child: TextField(
                                      controller: _peerMessage,
                                      autofocus: false,
                                      minLines: 1,
                                      maxLines: 5,
                                      keyboardType: TextInputType.multiline,
                                      decoration: InputDecoration(
                                        hintText: 'Type your message',
                                        border: InputBorder.none,
                                        hintStyle: TextStyle(
                                            fontSize: 11.sp,
                                            color: Colors.black38),
                                        focusedBorder: InputBorder.none,
                                        enabledBorder: InputBorder.none,
                                        errorBorder: InputBorder.none,
                                        disabledBorder: InputBorder.none,
                                        contentPadding: const EdgeInsets.only(
                                            left: 10, bottom: 0),
                                      ),
                                      onChanged: (String value) {
                                        // if(_peerMessage.text.length == 1){
                                        setState(() {
                                          message = _peerMessage.text;
                                        });
                                        //  }
                                      },
                                    ),
                                  ),
                                ],
                              ),
                            )),
                            const SizedBox(
                              width: 10,
                            ),
                            message == "" && !_sendingMessage
                                ? SizedBox(
                                    width: 60,
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      children: [
                                        InkWell(
                                          onTap: () {
                                            //  _pickVideo();
                                            addAttachment();
                                            //    getImage(ImageSource.gallery);
                                            debugPrint('mic button pressed');
                                          },
                                          child: const Icon(
                                            Icons.attachment,
                                            color: Colors.white,
                                          ),
                                        ),
                                        InkWell(
                                          onTap: () {
                                            debugPrint('add button pressed');
                                            getImage(ImageSource.camera);
                                          },
                                          child: const Icon(Icons.photo_camera,
                                              color: Colors.white),
                                        ),
                                      ],
                                    ),
                                  )
                                : Container(),
                            const SizedBox(
                              width: 5,
                            ),
                            message != "" || _sendingMessage
                                ? Align(
                                    alignment: Alignment.bottomRight,
                                    child: CircleAvatar(
                                      backgroundColor: Colors.white,
                                      radius: 22,
                                      child: IconButton(
                                          icon: Icon(
                                            _sendingMessage
                                                ? Icons.access_time
                                                : Icons.send,
                                            color: const Color(0xFF5c0e35),
                                            size: 25,
                                          ),
                                          onPressed: _sendingMessage
                                              ? null
                                              : () {
                                                  if (_peerMessage.text
                                                      .trim()
                                                      .isNotEmpty) {
                                                    setState(() {
                                                      message = "";
                                                    });
                                                    _sendPeerMessage();
                                                  } else {
                                                    //EasyLoading.showToast('Kya yrr kuch toh likho');
                                                  }
                                                }),
                                    ),
                                  )
                                : Container()
                          ],
                        ),
                      )),
                ],
              ),
            )),
      ),
    );
  }

  addAttachment() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
          return Container(
            height: 20.h,
            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 60),
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20), color: Colors.white),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Choose One",
                      style: TextStyle(fontSize: 15.sp),
                    ),
                    IconButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        icon: const Icon(Icons.cancel))
                  ],
                ),
                Padding(
                    padding:
                        EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                    child: Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          children: [
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.camera_alt,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        getImage(ImageSource.camera);
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Camera")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.image,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        getImage(ImageSource.gallery);
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Gallery")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.videocam,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _pickVideo();
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Video")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.video_collection,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _pickpdf();
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Pdf")
                              ],
                            ),
                          ],
                        ),
                        /*   SizedBox(
                          height: 15,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          children: [
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: AppColors.appNewDarkThemeColor,
                              child: IconButton(
                                icon: Icon(
                                  Icons.videocam,
                                  color: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    _pickVideoFromCamera();
                                    Navigator.pop(context);
                                  });
                                },
                              ),
                            ),
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: Colors.transparent,
                              child: IconButton(
                                icon: const Icon(
                                  Icons.videocam,
                                  color: Colors.transparent,
                                ),
                                onPressed: () {
                                  setState(() {
                                    // _pickVideoFromCamera();
                                  });
                                },
                              ),
                            ),
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: Colors.transparent,
                              child: IconButton(
                                icon: Icon(
                                  Icons.videocam,
                                  color: Colors.transparent,
                                ),
                                onPressed: () {
                                  setState(() {
                                    // _pickVideoFromCamera();
                                  });
                                },
                              ),
                            ),
                          ],
                        )*/
                      ],
                    ))
              ],
            ),
          );
        });
      },
    );
  }

  Future<void> getImage(ImageSource source) async {
    final pickedFile = await picker.pickImage(source: source, imageQuality: 50);
    final textid = DateTime.now().millisecondsSinceEpoch.toString();

    ChatModel model = ChatModel(
        // deliveryStatus: 'new',
        diraction: 'send',
        from: userpeerid,
        textId: textid,
        group: widget.recentchatuserdetails.groupName,
        message: pickedFile.name,
        url: pickedFile.path,
        // message: pickedFile.path + "#@#&" + pickedFile.name,
        reply: replytex.isNotEmpty ? 'reply' : 'noreplay',
        timestamp: DateTime.now().toString(),
        to: '',
        type: 'image');

    imageapi(pickedFile, model);
  }

  _pickVideo() async {
    FilePickerResult result = await FilePicker.platform
        .pickFiles(type: FileType.custom, allowedExtensions: ['mp4']);
    PlatformFile files = result.files.first;
    final file = XFile(files.path);
    final textid = DateTime.now().millisecondsSinceEpoch.toString();

    ChatModel model = ChatModel(
        // deliveryStatus: 'new',
        diraction: 'send',
        from: userpeerid,
        textId: textid,
        group: widget.recentchatuserdetails.groupName,
        message: files.name,
        url: file.path,
        reply: replytex.isNotEmpty ? 'reply' : 'noreplay',
        timestamp: DateTime.now().toString(),
        to: '',
        type: 'video');

    videoAPI(file, model);
  }

  void _sendPeerMessage() async {
    if (widget.rtmpeerid.isEmpty) {
      // widget.logController.addGroupLog('Please input peer user id to send message.');
      return;
    }
    if (_peerMessage.text.isEmpty) {
      //  widget.logController.addGroupLog('Please input text to send.');
      return;
    }
    var textid = DateTime.now().millisecondsSinceEpoch.toString();

    setState(() {
      _sendingMessage = true;
    });
    try {
      ChatModel model = ChatModel(
          replyText: replytex,
          // deliveryStatus: 'new',
          diraction: 'send',
          from: userpeerid,
          textId: textid,
          group: widget.recentchatuserdetails.groupName,
          message: _peerMessage.text,
          reply: replytex.isNotEmpty ? 'reply' : 'noreplay',
          timestamp: DateTime.now().toString(),
          url: '',
          to: '',
          type: 'text');

      AgoraRtmMessage message =
          AgoraRtmMessage.fromText(jsonEncode(model.toJson()));

      for (var row in widget.membersList) {
        if (userpeerid != row.pid) {
          await (await _createClient())
              .sendMessageToPeer(row.pid, message, true, false);
          await _sendFCMPushChat(model, row.fcmToken, '');
          // fcmapicall(
          //     model, row.fcmToken, '', "group", 'basic_channel', textid, row.pid
          //     // widget.rtmpeerid.toString(),
          //     );
        }
      }
      final id = await _insertgroup(model);
      model.id = id.toString();
      groupChatLogController.addLog(model);
      replytex = "";
      _peerMessage.clear();
      setState(() {
        _controller.animateTo(_controller.position.maxScrollExtent,
            duration: const Duration(milliseconds: 300), curve: Curves.easeOut);
        _peerMessage.clear();
        _sendingMessage = false;
        replyvisibility = false;
      });
    } catch (errorCode) {
      setState(() {
        // _peerMessage.clear();
        _sendingMessage = false;
        replyvisibility = false;
      });
      debugPrint('error $errorCode');
    }
  }

  Future<int> _insertgroup(ChatModel model) async {
    Map<String, dynamic> row = {
      DatabaseHelper.Id: null,
      DatabaseHelper.message: model.message,
      DatabaseHelper.url: model.url ?? '',
      DatabaseHelper.timestamp: DateTime.now().toString(),
      DatabaseHelper.diraction: 'send',
      DatabaseHelper.replyText: model.replyText,
      DatabaseHelper.reply: model.reply,
      DatabaseHelper.type: model.type,
      DatabaseHelper.from: widget.rtmpeerid,
      DatabaseHelper.to: '',
      DatabaseHelper.groupname: model.group,
      DatabaseHelper.textId: model.textId
    };
    final id = await dbHelper.groupinsert(row);
    debugPrint('inserted group row id: $id');
    return id;
  }

  void updatelocaldata(user) async {
    await dbHelper.sendUpdate(user, DateTime.now());
    debugPrint('query all rows:');
  }

  void imageapi(XFile image, ChatModel model) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  ApiRepository()
                      .uplordchatimage(value, image)
                      .then((value) async {
                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          model.message = image.name;
                          model.url = value.body.source;
                          AgoraRtmMessage message = AgoraRtmMessage.fromText(
                              jsonEncode(model.toJson()));
                          for (var row in widget.membersList) {
                            if (userpeerid != row.pid) {
                              await (await _createClient()).sendMessageToPeer(
                                  row.pid, message, true, false);
                              await _sendFCMPushChat(
                                  model, row.fcmToken, value.body.source);
                              // fcmapicall(
                              //     model,
                              //     row.fcmToken,
                              //     value.body.source,
                              //     "group",
                              //     'basic_channel',
                              //     model.textId,
                              //     row.pid);
                            }
                          }
                          // for (int i = 0; i < widget.membersList.length; i++) {
                          //   widget.client.sendMessageToPeer(
                          //       widget.membersList[i].pid,
                          //       message,
                          //       true,
                          //       false);
                          // }

                          model.url = image.path;
                          final id = await _insertgroup(model);
                          model.id = id.toString();
                          groupChatLogController.addLog(model);

                          // for (var row
                          //     in widget.recentchatuserdetails.members) {
                          //   {
                          //     if (userpeerid != row.pid) {
                          //       fcmapicall(
                          //           model,
                          //           row.fcmToken,
                          //           value.body.source,
                          //           "group",
                          //           'basic_channel',
                          //           model.textId,
                          //           "");
                          //     }
                          //     debugPrint(row);
                          //   }
                          // }
                        } else {
                          Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  void videoAPI(final XFile video, ChatModel model) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  ApiRepository()
                      .uplordchatimage(value, video)
                      .then((value) async {
                    if (mounted) {
                      if (value != null) {
                        // var textid =
                        //     DateTime.now().millisecondsSinceEpoch.toString();
                        if (value.status == "successfull") {
                          // if (onlinestatus == 'offline') {
                          //   fcmapicall(
                          //     files.name,
                          //     widget.recentchatuserdetails.groupAdmin,
                          //     value.body.source,
                          //     "",
                          //     'basic_channel',
                          //     model.textId,
                          //     widget.rtmpeerid.toString(),
                          //   );
                          // }
                          model.message = video.name;
                          model.url = value.body.source;
                          AgoraRtmMessage message = AgoraRtmMessage.fromText(
                              jsonEncode(model.toJson()));

                          for (var row
                              in widget.recentchatuserdetails.members) {
                            if (userpeerid != row.pid) {
                              await (await _createClient()).sendMessageToPeer(
                                  row.pid, message, true, false);
                              await _sendFCMPushChat(model, row.fcmToken, '');
                              // fcmapicall(
                              //   model,
                              //   row.fcmToken,
                              //   value.body.source,
                              //   '',
                              //   'basic_channel',
                              //   model.textId,
                              //   row.pid,
                              // );
                              // debugPrint(row);
                            }
                          }

                          model.url = video.path;
                          final id = await _insertgroup(model);
                          model.id = id.toString();
                          groupChatLogController.addLog(model);

                          setState(() {
                            // AgoraRtmMessage message = AgoraRtmMessage.fromText(
                            //     "group#@####@#" +
                            //         value.body.source +
                            //         "#@####@#" +
                            //         replytex +
                            //         "#@####@#" +
                            //         widget.recentchatuserdetails.groupName +
                            //         "#@####@#" +
                            //         DateTime.now().toString() +
                            //         "#@####@#$textid");
                            // AgoraRtmMessage message = AgoraRtmMessage.fromText("group#@####@#"+ value.body.source+ "#@####@#"+ DateTime.now().toString());

                            // _insertgroup(
                            //     replytex +
                            //         "#@####@#noreplay#@####@#" +
                            //         files.path +
                            //         "#@#&" +
                            //         files.name,
                            //     'video',
                            //     'send');
                          });
                        } else {
                          Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  List<String> colorList = ['copy', 'delete'];

  Future<String> _askFavColor(
      String selectedmsgid, String message, int i) async {
    return showDialog(
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(builder: (context, refresh) {
            return AlertDialog(
              content: Container(
                width: double.minPositive,
                child: ListView.builder(
                  shrinkWrap: true,
                  itemCount: colorList.length,
                  itemBuilder: (BuildContext context, int index) {
                    return ListTile(
                      title: Text(colorList[index]),
                      onTap: () {
                        switch (index) {
                          case 0:
                            Clipboard.setData(ClipboardData(text: message));
                            //  Helper.showMessage('Copied');
                            Navigator.of(context, rootNavigator: true)
                                .pop('dialog');
                            break;
                          case 1:
                            Navigator.of(context, rootNavigator: true)
                                .pop('dialog');
                            _delete(int.parse(selectedmsgid), i);
                            break;
                        }

                        // Navigator.pop(context, colorList[index]);
                      },
                    );
                  },
                ),
              ),
            );
          });
        });
  }

  Widget images() {
    return afile
        ? SizedBox(
            height: 20.h,
            width: double.infinity,
            child: Image.file(File(replyPath),
                errorBuilder: (context, url, error) => const Icon(Icons.error,
                    size: 70,
                    color: Colors.red,
                    semanticLabel: "image not found")),
          )
        : Text(replytex,
            style: const TextStyle(fontSize: 14.0, color: Colors.black));
  }

  Future<void> _sendFCMPushChat(
      ChatModel model, String receiverToken, String image) async {
    if (await Helper.checkConnectivity()) {
      final value = await ApiRepository().sendChatPush(
        model: model,
        title: widget.recentchatuserdetails.groupName,
        receiverToken: receiverToken,
        // image: image,
        fromPeerId: userpeerid,
        type: 'basic_channel',
      );
      if (value != null) {
        debugPrint('${value.toJson()}');
      }
    } else {
      Helper.showNoConnectivityDialog(context);
    }

    // Helper.checkConnectivity().then((value) => {
    //       if (value)
    //         {
    //           ApiRepository()
    //               .sendChatPush(
    //                 model: model,
    //                 title: widget.recentchatuserdetails.groupName,
    //                 receiverToken: receiverToken,
    //                 // image: image,
    //                 fromPeerId: userpeerid,
    //                 type: 'basic_channel',
    //               )
    //               .then((value) async {})
    //         }
    //       else
    //         {Helper.showNoConnectivityDialog(context)}
    //     });
  }
  // void fcmapicall(ChatModel model, String fcmtoken, image, call_id, type,
  //     textid, senderpeerid) {
  //   Helper.checkConnectivity().then((value) => {
  //         if (value)
  //           {
  //             ApiRepository()
  //                 .sendChatPush(
  //                     model,
  //                     widget.recentchatuserdetails.groupName,
  //                     fcmtoken,
  //                     image,
  //                     call_id,
  //                     type,
  //                     Logindata.authToken,
  //                     '',
  //                     DateTime.now().toString(),
  //                     userpeerid,
  //                     senderpeerid,
  //                     textid)
  //                 .then((value) async {})
  //           }
  //         else
  //           {Helper.showNoConnectivityDialog(context)}
  //       });
  // }

  localdata() async {
    String value = await PreferenceConnector.getJsonToSharedPreferencetoken(
        StringConstant.Userdata);
    // PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.Userdata)
    //     .then((value) => {
    if (value != null) {
      profileJson = jsonDecode(value.toString());
      _loginData = LocalDataModal.fromJson(profileJson);

      debugPrint("WIddget ${widget.membersList}");
      // setState(() {
      for (int i = 0; i < widget.membersList.length; i++) {
        var name = widget.membersList[i].pid;
        if (name == _loginData.id.toString()) {
          groupMembers.add("You");
        } else {
          groupMembers.add(widget.membersList[i].name);
        }
      }
      debugPrint("groupMember $groupMembers");
      if (_hasRebuildCalled) setState(() {});
      // });
    }
    // });
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('action', widget.recentchatuserdetails.groupName);
  }

  // Future<void> _query() async {
  //   final allRows = await dbHelper.AllRows();
  //   debugPrint('query all rows:$allRows');
  //   for (var row in allRows) {
  //     {
  //       if (row != null) {
  //         // logController.addGroupLog(row["calleeName"] + "#@####@#" + row["calltype"] + "#@####@#" + row["Calldrm"] +"#@####@#" + row["timestamp"] );}}
  //       }
  //     }
  //   }
  // }

  void _scrollDown(log) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _controller.jumpTo(_controller.position.maxScrollExtent + 10);
    });
  }

  Widget usershort(id) {
    // var name = "";

    // for (var row in widget.recentchatuserdetails.members) {
    //   {
    //     if (id == row.pid) {
    //       name = row.name;
    //     }
    //     debugPrint(row);
    //   }
    // }
    String name = widget.recentchatuserdetails.members
            .firstWhere((row) => row.pid == id)
            ?.name ??
        widget.recentchatuserdetails.groupName;
    return CircleAvatar(
        backgroundColor: const Color(0xFF5c0e35),
        child: Text(
          name[0],
          // name != "" ? name[0] : widget.recentchatuserdetails.groupName[0],
          style: const TextStyle(color: Colors.white),
        ));
  }

  sendername(id) {
    String name = widget.recentchatuserdetails.members
            .firstWhere((row) => row.pid == id)
            ?.name ??
        '';
    // var name = "";
    // for (var row in widget.recentchatuserdetails.members) {
    //   {
    //     if (id == row.pid) {
    //       name = row.name;
    //       break;
    //     }
    //   }
    // }
    return Text(name, style: const TextStyle(color: Colors.brown));
  }

  _pickpdf() async {
    FilePickerResult result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc'],
    );
    PlatformFile files = result.files.first;
    final file = XFile('${files.path}');
    final textid = DateTime.now().millisecondsSinceEpoch.toString();

    ChatModel model = ChatModel(
        // deliveryStatus: 'new',
        diraction: 'send',
        from: userpeerid,
        textId: textid,
        group: widget.recentchatuserdetails.groupName,
        message: files.name,
        url: files.path,
        reply: replytex.isNotEmpty ? 'reply' : 'noreplay',
        timestamp: DateTime.now().toString(),
        to: '',
        type: 'doc');
    imageapi(file, model);
    // if (replytex != "") {
    //   var file = "group" "#@####@#" +
    //       files.path +
    //       "#@#&" +
    //       files.name +
    //       '#@####@#' +
    //       replytex +
    //       "#@####@#replay#@####@#" +
    //       'send' +
    //       '#@####@#doc' +
    //       "#@####@#" +
    //       DateTime.now().toString() +
    //       "#@####@#" +
    //       "" +
    //       "#@####@#" +
    //       widget.rtmpeerid +
    //       "#@####@#" +
    //       widget.recentchatuserdetails.groupName;
    //   widget.logController.addGroupLog(file);
    //   _insertgroup(
    //     replytex + "#@####@#replay#@####@#" + files.path + "#@#&" + files.name,
    //     'doc',
    //     'send',
    //   );
    // } else {
    //   var file = "group" "#@####@#" +
    //       files.path +
    //       "#@#&" +
    //       files.name +
    //       '#@####@#' +
    //       replytex +
    //       "#@####@#noreplay#@####@#" +
    //       'send' +
    //       '#@####@#doc' +
    //       "#@####@#" +
    //       DateTime.now().toString() +
    //       "#@####@#" +
    //       "" +
    //       "#@####@#" +
    //       widget.rtmpeerid +
    //       "#@####@#" +
    //       widget.recentchatuserdetails.groupName;

    //   widget.logController.addGroupLog(file);
    //   _insertgroup(
    //     replytex +
    //         "#@####@#noreplay#@####@#" +
    //         files.path +
    //         "#@#&" +
    //         files.name,
    //     'doc',
    //     'send',
    //   );
    // }
    updatelocaldata(widget.rtmpeerid);
  }

  textwidget(String textname, String type, String direction) {
    var texts = textname;
    if (type == "doc" || type == "video") {
      dynamic text = textname.split('#@#&');
      if (text.length == 1) {
        dynamic text = textname.split('/');
        texts = text[text.length - 1];
      } else {
        texts = text[1];
      }
    }

    return Text(
      texts.trim(),
      style: TextStyle(
          color: direction != 'send' ? Colors.black : Colors.white,
          fontSize: 16),
      textAlign: TextAlign.left,
    );
  }

  typeicons(texttype) {
    if (texttype == "doc") {
      return Icon(
        Icons.description_outlined,
        color: Colors.yellow,
        size: 15.sp,
      );
    } else if (texttype == "video") {
      return Icon(
        Icons.play_arrow,
        color: Colors.yellow,
        size: 15.sp,
      );
    }
  }
}
